import os
import pandas as pd
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging
import PyUber

# Configure logging
logging.basicConfig(level=logging.INFO)

# Source
source = 'Company Server'

# SQL Query - Detailed notes in SQL server
prime_query = """
WITH CombinedData AS (
    SELECT 
        *** -- Company sensitive information removed from the query
    FROM T6
    UNION ALL
    SELECT
        LOT,
        OPERATION,
        TXN_DATE AS DATE_COLUMN,
        "TRANSACTION" AS TYPE,
        COMMENTS AS TEXT
    FROM T5
),
RankedData AS (
    SELECT
    *** -- Company sensitive information removed from the query
    FROM CombinedData
),
LATESTT5 AS (
    *** -- Company sensitive information removed from the query
    FROM RankedData
    WHERE RN = 1
)

SELECT DISTINCT 
*** -- Company sensitive information removed from the query
FROM T0
JOIN T3 ON T0.LOT = T3.LOT
LEFT JOIN WL ON T0.LOT_OWNER = WL.**
LEFT JOIN WH ON SUBSTR(T0.HOLD_NAME, 5) = WH.**
LEFT JOIN (
      SELECT 
         LOT,
         OPERATION,
         TXN_DATE,
         "TRANSACTION",
         COMMENTS
      FROM LATESTT5
      WHERE RN = 1
      ) T5 ON T0.LOT = T5.LOT and T0.OPERATION = T5.OPERATION
"""

# Function to create HTML table
def create_html_table(dataframe):
    html = '<table border="1">'
    html += '<tr><th>Lot</th><th>Operation</th><th>Hot Box</th><th>HAO</th><th>Dot Process</th><th>Product</th><th>On Hold</th><th>Hold Category</th><th>Hold Name</th><th>Comments</th><th>At Stores</th><th>Lot State</th></tr>'
    for index, row in dataframe.iterrows():
        html += f'<tr><td>{row["LOT"]}</td><td>{row["OPERATION"]}</td><td>{row["HB"]}</td><td>{row["HAO"]}</td><td>{row["DOTPROCESS"]}</td><td>{row["PRODUCT"]}</td><td>{row["ONHOLD"]}</td><td>{row["HOLD_CATEGORY"]}</td><td>{row["HOLD_NAME"]}</td><td>{row["COMMENTS"]}</td><td>{row["ATSTORES"]}</td><td>{row["LOT_STATE"]}</td></tr>'
    html += '</table>'
    return html

# Function to send email
def send_email(to_email, cc_email, subject, html_content):
    email_user = 'NMDMOPROD@intel.com'

    msg = MIMEMultipart()
    msg['From'] = email_user
    msg['To'] = to_email
    msg['Cc'] = cc_email
    msg['Subject'] = subject

    msg.attach(MIMEText(html_content, 'html'))

    try:
    # Connect to the SMTP server without specifying a port
        with smtplib.SMTP('smtp.intel.com') as smtp_server:
            smtp_server.sendmail(email_user, [to_email, cc_email], msg.as_string())
            logging.info(f"Email sent to {to_email} with CC to {cc_email} and subject '{subject}'.")
    except Exception as e:
        logging.error(f"Failed to send email to {to_email} with CC to {cc_email}: {e}")

# Query Process
def send_emails():
    try:
        conn = PyUber.connect(datasource=source, TimeOutInSeconds=6000)
        logging.info("Database connection established.")
        
        query_df = pd.read_sql_query(prime_query, conn)
        logging.info("Query executed successfully.")
        
        conn.close()
        logging.info("Database connection closed.")
    
        # Print DataFrame columns for debugging
        print("DataFrame columns:", query_df.columns)

        email_user = 'XX@intel.com'
        

        # Group by HOLD_NAME_EMAIL for ONHOLD lots
        onhold_grouped = query_df[query_df['ONHOLD'] == 'Y'].groupby('HO_EMAIL')

        for email, group in onhold_grouped:
            first_name = group['HO_NAME'].iloc[0]
            subject = "[P5051 Help Needed] Hold Lot Disposition"
            
            # Override the recipient email with the test email address for testing
            to_email = email
            #cc_email = 'XY@intel.com','XZ@intel.com' # CC the lot owner email group['LOT_OWNER_EMAIL'].iloc[0]

            # Construct the email content
            body = f"Hello {first_name},<br><br>Please help to comment/disposition the lots under your name with ECD:<br><br>"
            html_content = body + create_html_table(group)

            # Send the email
            send_email(to_email, '', subject, html_content)

        '''
        # Group by LOT_OWNER_EMAIL for specific LOT_STATE values
        stores_grouped = query_df[query_df['LOT_STATE'].isin(['XXX', 'XYZ'])].groupby('LO_EMAIL')

        for email, group in stores_grouped:
            first_name = group['LO_NAME'].iloc[0]
            subject = "Stored Material Disposition"
            
            # Override the recipient email with the test email address for testing
            to_email = test_email #change to: email

            # Construct the email content
            body = f"Hello {first_name},<br><br>Please help to comment/disposition the materials under your name with ECD:<br><br>"
            html_content = body + create_html_table(group)

            # Send the email
            send_email(to_email, '', subject, html_content)  # No CC for stored lots 
        '''

    except Exception as e:
        logging.error(f"An error occurred: {e}")

# Run the email sending process
send_emails()
