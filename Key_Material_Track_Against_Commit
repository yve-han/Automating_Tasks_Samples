import datetime
import PyUber, PyUber.client
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

#SETUP VALUES
XEUS_source = 'F21_PROD_XEUS'

# Define the SQL query
query_string = """
SELECT flf.lot,
       flf.operation,
       flf.OPER_SHORT_DESC,
       TIMESTAMP_FORMAT(flf.out_date, 'YYYYMMDD HH24:MI:SS.FF') AS out_date,
       TIMESTAMP_FORMAT(A.ATTRIBUTE_VALUE, 'YYYYMMDD HH24:MI:SS.FF') AS Due_Date,
       CT.PLAN_CYCLE_TIME,
       flf.product,
       flf.exec_seq,
       flf.lot_type,
       flf.lot_process,
       flf.lot7,
       flf.exec_flag,
       flf.MERGE_FLAG
       
FROM F21S.F_LOT_FLOW flf
LEFT JOIN 
    (SELECT * FROM F21S.F_UDF_PROCESS_OPER
    WHERE "WHAT_IF#" = 0 and PROCESS = '5051' ) CT ON flf.operation = CT.operation
LEFT JOIN F21S.F_LOTATTRIBUTE A ON flf.LOT = A.LOT AND A.ATTRIBUTE_NAME = 'DueDate'
WHERE flf.history_deleted_flag = 'N' 
and flf.LOT in
      (
        SELECT L.LOT FROM F21S.F_LOT L
        LEFT JOIN F21S.F_LOTATTRIBUTE A
        ON L.LOT = A.LOT
        WHERE ROUTE LIKE 'FL%'
        AND DOTPROCESS LIKE '5051%'
        AND LOT_TYPE = 'TD'
        AND ATTRIBUTE_NAME = 'DueDate' 
        AND ATTRIBUTE_VALUE is not null
        AND LOT_STATE = 'Active'
      )
ORDER BY flf.EXEC_SEQ
"""

# Run query
conn = PyUber.connect(datasource=XEUS_source, TimeOutInSeconds=6000)

# Save query output as DataFrame
DataOut = pd.read_sql_query(query_string, conn)

# Close the database connection
conn.close()

# Filter out operations with non-null OUT_DATE
DataOut = DataOut[DataOut['OUT_DATE'].isnull()]

# Sort by 'LOT' and 'EXEC_SEQ' to ensure correct order
DataOut = DataOut.sort_values(by=['LOT', 'EXEC_SEQ'])

# Calculate the total PLAN_CYCLE_TIME for each lot where OUT_DATE is null
total_plan_cycle_time = DataOut.groupby('LOT')['PLAN_CYCLE_TIME'].sum().reset_index()
total_plan_cycle_time.rename(columns={'PLAN_CYCLE_TIME': 'PLAN_CYCLE_TIME_Total'}, inplace=True)

# Get the first operation for each lot where OUT_DATE is null
first_operation = DataOut.drop_duplicates(subset='LOT', keep='first')

# Merge the total_plan_cycle_time back to the first_operation DataFrame
result_df = first_operation.merge(total_plan_cycle_time, on='LOT')

# Verify column names before selecting
print(result_df.columns)

# Select relevant columns to display
result_df = result_df[['LOT', 'OPERATION', 'OPER_SHORT_DESC', 'DUE_DATE', 'PLAN_CYCLE_TIME_Total']]

# Display the result
print(result_df)
