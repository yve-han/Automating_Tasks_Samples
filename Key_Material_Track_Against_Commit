import datetime
import PyUber, PyUber.client
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

#SETUP Data source value
Data_source = 'Data Source'

# SQL query
query_string = """
SELECT flf.lot,
       flf.operation,
       flf.OPER_SHORT_DESC,
       TIMESTAMP_FORMAT(flf.out_date, 'YYYYMMDD HH24:MI:SS.FF') AS out_date,
       TIMESTAMP_FORMAT(A.ATTRIBUTE_VALUE, 'YYYYMMDD HH24:MI:SS.FF') AS Due_Date,
       CT.PLAN_CYCLE_TIME,
       flf.product,
       flf.exec_seq,
       flf.lot_type,
       flf.lot_process,
       flf.lot7,
       flf.exec_flag,
       flf.MERGE_FLAG
       
FROM flf
LEFT JOIN 
    (SELECT * FROM OPER
    WHERE PROCESS = '0000' ) CT ON flf.operation = CT.operation
LEFT JOIN A ON flf.LOT = A.LOT AND A.ATTRIBUTE_NAME = 'DueDate'
WHERE flf.history_deleted_flag = 'N' 
and flf.LOT in
      (
      -- Required condition in different data
      )
ORDER BY flf.EXEC_SEQ
"""

#Query run
conn = PyUber.connect(datasource=Data_source, TimeOutInSeconds=6000)

# Data fram creation
DataOut = pd.read_sql_query(query_string, conn)

#connection close
conn.close()

# CT Calc part 1 - Filter lots with no out date
DataOut = DataOut[DataOut['OUT_DATE'].isnull()]

# CT Calc part 2 - Correctly sort the list in process flow sequence
DataOut = DataOut.sort_values(by=['LOT', 'EXEC_SEQ'])

# CT Calc part 3 - Calculate the total CT where lots don't have out date
total_plan_cycle_time = DataOut.groupby('LOT')['PLAN_CYCLE_TIME'].sum().reset_index()
total_plan_cycle_time.rename(columns={'PLAN_CYCLE_TIME': 'PLAN_CYCLE_TIME_Total'}, inplace=True)

# First operation with no out date identify
first_operation = DataOut.drop_duplicates(subset='LOT', keep='first')

# Merge the total_plan_cycle_time back to the first_operation DataFrame
result_df = first_operation.merge(total_plan_cycle_time, on='LOT')

# Check:
# print(result_df.columns)

# Filter / Select only needed columns for visualization in Power BI
result_df = result_df[['LOT', 'OPERATION', 'OPER_SHORT_DESC', 'DUE_DATE', 'PLAN_CYCLE_TIME_Total']]

# Display the result - for brief check only
# print(result_df)
